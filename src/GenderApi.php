<?php
/**
 * GenderApi
 * PHP version 5
 *
 * @category Class
 * @package  METHIS
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * METHIS Master Data
 *
 * Documentation for METHIS Master Data API for centralized master data storage
 *
 * OpenAPI spec version: 1.1.0
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace METHIS;

use \METHIS\ApiClient;
use \METHIS\ApiException;
use \METHIS\Configuration;
use \METHIS\ObjectSerializer;

/**
 * GenderApi Class Doc Comment
 *
 * @category Class
 * @package  METHIS
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GenderApi
{
    /**
     * API Client
     *
     * @var \METHIS\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \METHIS\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\METHIS\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://master-data.methis.at/api');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \METHIS\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \METHIS\ApiClient $apiClient set the API client
     *
     * @return GenderApi
     */
    public function setApiClient(\METHIS\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation genderAll
     *
     * Export the complete gender data
     *
     * @param string $key The API key which you got for authenticating against the API (required)
     * @throws \METHIS\ApiException on non-2xx response
     * @return \METHIS\GenderAllResponse
     */
    public function genderAll($key)
    {
        list($response) = $this->genderAllWithHttpInfo($key);
        return $response;
    }

    /**
     * Operation genderAllWithHttpInfo
     *
     * Export the complete gender data
     *
     * @param string $key The API key which you got for authenticating against the API (required)
     * @throws \METHIS\ApiException on non-2xx response
     * @return array of \METHIS\GenderAllResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function genderAllWithHttpInfo($key)
    {
        // verify the required parameter 'key' is set
        if ($key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key when calling genderAll');
        }
        if ((strlen($key) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$key" when calling GenderApi.genderAll, must be smaller than or equal to 40.');
        }
        if ((strlen($key) < 40)) {
            throw new \InvalidArgumentException('invalid length for "$key" when calling GenderApi.genderAll, must be bigger than or equal to 40.');
        }

        // parse inputs
        $resourcePath = "/gender/all";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($key !== null) {
            $formParams['key'] = $this->apiClient->getSerializer()->toFormValue($key);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\METHIS\GenderAllResponse',
                '/gender/all'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\METHIS\GenderAllResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\GenderAllResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation genderDetect
     *
     * Detects the gender based on the given first name
     *
     * @param string $key The API key which you got for authenticating against the API (required)
     * @param string $first_name The first name (required)
     * @param string $country_code Optional 2 digit ISO country code. If this value is set, only country specific first names will be searched. (optional)
     * @throws \METHIS\ApiException on non-2xx response
     * @return \METHIS\GenderDetectResponse
     */
    public function genderDetect($key, $first_name, $country_code = null)
    {
        list($response) = $this->genderDetectWithHttpInfo($key, $first_name, $country_code);
        return $response;
    }

    /**
     * Operation genderDetectWithHttpInfo
     *
     * Detects the gender based on the given first name
     *
     * @param string $key The API key which you got for authenticating against the API (required)
     * @param string $first_name The first name (required)
     * @param string $country_code Optional 2 digit ISO country code. If this value is set, only country specific first names will be searched. (optional)
     * @throws \METHIS\ApiException on non-2xx response
     * @return array of \METHIS\GenderDetectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function genderDetectWithHttpInfo($key, $first_name, $country_code = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key when calling genderDetect');
        }
        if ((strlen($key) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$key" when calling GenderApi.genderDetect, must be smaller than or equal to 40.');
        }
        if ((strlen($key) < 40)) {
            throw new \InvalidArgumentException('invalid length for "$key" when calling GenderApi.genderDetect, must be bigger than or equal to 40.');
        }

        // verify the required parameter 'first_name' is set
        if ($first_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first_name when calling genderDetect');
        }
        if ((strlen($first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling GenderApi.genderDetect, must be smaller than or equal to 30.');
        }
        if ((strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling GenderApi.genderDetect, must be bigger than or equal to 1.');
        }

        if (!is_null($country_code) && (strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling GenderApi.genderDetect, must be smaller than or equal to 2.');
        }
        if (!is_null($country_code) && (strlen($country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling GenderApi.genderDetect, must be bigger than or equal to 2.');
        }

        // parse inputs
        $resourcePath = "/gender/detect";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($key !== null) {
            $formParams['key'] = $this->apiClient->getSerializer()->toFormValue($key);
        }
        // form params
        if ($first_name !== null) {
            $formParams['first_name'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\METHIS\GenderDetectResponse',
                '/gender/detect'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\METHIS\GenderDetectResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\GenderDetectResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation genderUpdate
     *
     * Update gender data
     *
     * @param string $key The API key which you got for authenticating against the API (required)
     * @param string $first_name The first name (required)
     * @param string $country_code Optional 2 digit ISO country code if the given data should be country specific. (optional)
     * @param string $gender The gender as it should be set (optional)
     * @throws \METHIS\ApiException on non-2xx response
     * @return \METHIS\GenderUpdateResponse
     */
    public function genderUpdate($key, $first_name, $country_code = null, $gender = null)
    {
        list($response) = $this->genderUpdateWithHttpInfo($key, $first_name, $country_code, $gender);
        return $response;
    }

    /**
     * Operation genderUpdateWithHttpInfo
     *
     * Update gender data
     *
     * @param string $key The API key which you got for authenticating against the API (required)
     * @param string $first_name The first name (required)
     * @param string $country_code Optional 2 digit ISO country code if the given data should be country specific. (optional)
     * @param string $gender The gender as it should be set (optional)
     * @throws \METHIS\ApiException on non-2xx response
     * @return array of \METHIS\GenderUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function genderUpdateWithHttpInfo($key, $first_name, $country_code = null, $gender = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key when calling genderUpdate');
        }
        if ((strlen($key) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$key" when calling GenderApi.genderUpdate, must be smaller than or equal to 40.');
        }
        if ((strlen($key) < 40)) {
            throw new \InvalidArgumentException('invalid length for "$key" when calling GenderApi.genderUpdate, must be bigger than or equal to 40.');
        }

        // verify the required parameter 'first_name' is set
        if ($first_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first_name when calling genderUpdate');
        }
        if ((strlen($first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling GenderApi.genderUpdate, must be smaller than or equal to 30.');
        }
        if ((strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling GenderApi.genderUpdate, must be bigger than or equal to 1.');
        }

        if (!is_null($country_code) && (strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling GenderApi.genderUpdate, must be smaller than or equal to 2.');
        }
        if (!is_null($country_code) && (strlen($country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling GenderApi.genderUpdate, must be bigger than or equal to 2.');
        }

        if (!is_null($gender) && (strlen($gender) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$gender" when calling GenderApi.genderUpdate, must be smaller than or equal to 2.');
        }
        if (!is_null($gender) && (strlen($gender) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$gender" when calling GenderApi.genderUpdate, must be bigger than or equal to 2.');
        }

        // parse inputs
        $resourcePath = "/gender/update";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($key !== null) {
            $formParams['key'] = $this->apiClient->getSerializer()->toFormValue($key);
        }
        // form params
        if ($first_name !== null) {
            $formParams['first_name'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        // form params
        if ($gender !== null) {
            $formParams['gender'] = $this->apiClient->getSerializer()->toFormValue($gender);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\METHIS\GenderUpdateResponse',
                '/gender/update'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\METHIS\GenderUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\GenderUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation gendersDetect
     *
     * Detects the gender based on the given first name
     *
     * @param string $key The API key which you got for authenticating against the API (required)
     * @param string $first_name The first name (required)
     * @param string $country_code Optional 2 digit ISO country code. If this value is set, only country specific first names will be searched. (optional)
     * @throws \METHIS\ApiException on non-2xx response
     * @return \METHIS\GenderDetectResponse
     */
    public function gendersDetect($key, $first_name, $country_code = null)
    {
        list($response) = $this->gendersDetectWithHttpInfo($key, $first_name, $country_code);
        return $response;
    }

    /**
     * Operation gendersDetectWithHttpInfo
     *
     * Detects the gender based on the given first name
     *
     * @param string $key The API key which you got for authenticating against the API (required)
     * @param string $first_name The first name (required)
     * @param string $country_code Optional 2 digit ISO country code. If this value is set, only country specific first names will be searched. (optional)
     * @throws \METHIS\ApiException on non-2xx response
     * @return array of \METHIS\GenderDetectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function gendersDetectWithHttpInfo($key, $first_name, $country_code = null)
    {
        // verify the required parameter 'key' is set
        if ($key === null) {
            throw new \InvalidArgumentException('Missing the required parameter $key when calling gendersDetect');
        }
        if ((strlen($key) > 40)) {
            throw new \InvalidArgumentException('invalid length for "$key" when calling GenderApi.gendersDetect, must be smaller than or equal to 40.');
        }
        if ((strlen($key) < 40)) {
            throw new \InvalidArgumentException('invalid length for "$key" when calling GenderApi.gendersDetect, must be bigger than or equal to 40.');
        }

        // verify the required parameter 'first_name' is set
        if ($first_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $first_name when calling gendersDetect');
        }
        if ((strlen($first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling GenderApi.gendersDetect, must be smaller than or equal to 30.');
        }
        if ((strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for "$first_name" when calling GenderApi.gendersDetect, must be bigger than or equal to 1.');
        }

        if (!is_null($country_code) && (strlen($country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling GenderApi.gendersDetect, must be smaller than or equal to 2.');
        }
        if (!is_null($country_code) && (strlen($country_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for "$country_code" when calling GenderApi.gendersDetect, must be bigger than or equal to 2.');
        }

        // parse inputs
        $resourcePath = "/genders/detect";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($key !== null) {
            $formParams['key'] = $this->apiClient->getSerializer()->toFormValue($key);
        }
        // form params
        if ($first_name !== null) {
            $formParams['first_name'] = $this->apiClient->getSerializer()->toFormValue($first_name);
        }
        // form params
        if ($country_code !== null) {
            $formParams['country_code'] = $this->apiClient->getSerializer()->toFormValue($country_code);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\METHIS\GenderDetectResponse',
                '/genders/detect'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\METHIS\GenderDetectResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\GenderDetectResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorUnauthorized', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorForbidden', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorNotFound', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorNotAllowed', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorMissingParameters', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorInternalError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\METHIS\ErrorServiceUnavailable', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
