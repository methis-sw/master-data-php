<?php
/**
 * UndeliverableContactResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  METHIS
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * METHIS Master Data
 *
 * Documentation for METHIS Master Data API for centralized master data storage
 *
 * OpenAPI spec version: 1.1.0
 * Contact: info@datamill.solutions
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace METHIS;

use \ArrayAccess;

/**
 * UndeliverableContactResponse Class Doc Comment
 *
 * @category    Class */
 // @description Response of an undeliverable search with no matches
/**
 * @package     METHIS
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UndeliverableContactResponse implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UndeliverableContactResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'undeliverable' => 'bool',
        'deceased' => 'bool',
        'moved' => 'bool',
        'new_address_available' => 'bool',
        'contact' => '\METHIS\ContactObject'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'undeliverable' => 'undeliverable',
        'deceased' => 'deceased',
        'moved' => 'moved',
        'new_address_available' => 'new_address_available',
        'contact' => 'contact'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'undeliverable' => 'setUndeliverable',
        'deceased' => 'setDeceased',
        'moved' => 'setMoved',
        'new_address_available' => 'setNewAddressAvailable',
        'contact' => 'setContact'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'undeliverable' => 'getUndeliverable',
        'deceased' => 'getDeceased',
        'moved' => 'getMoved',
        'new_address_available' => 'getNewAddressAvailable',
        'contact' => 'getContact'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['undeliverable'] = isset($data['undeliverable']) ? $data['undeliverable'] : null;
        $this->container['deceased'] = isset($data['deceased']) ? $data['deceased'] : null;
        $this->container['moved'] = isset($data['moved']) ? $data['moved'] : null;
        $this->container['new_address_available'] = isset($data['new_address_available']) ? $data['new_address_available'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['undeliverable'] === null) {
            $invalid_properties[] = "'undeliverable' can't be null";
        }
        if ($this->container['deceased'] === null) {
            $invalid_properties[] = "'deceased' can't be null";
        }
        if ($this->container['moved'] === null) {
            $invalid_properties[] = "'moved' can't be null";
        }
        if ($this->container['new_address_available'] === null) {
            $invalid_properties[] = "'new_address_available' can't be null";
        }
        if ($this->container['contact'] === null) {
            $invalid_properties[] = "'contact' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['undeliverable'] === null) {
            return false;
        }
        if ($this->container['deceased'] === null) {
            return false;
        }
        if ($this->container['moved'] === null) {
            return false;
        }
        if ($this->container['new_address_available'] === null) {
            return false;
        }
        if ($this->container['contact'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets undeliverable
     * @return bool
     */
    public function getUndeliverable()
    {
        return $this->container['undeliverable'];
    }

    /**
     * Sets undeliverable
     * @param bool $undeliverable True if the address is undeliverable (means that the contact is deceased or moved)
     * @return $this
     */
    public function setUndeliverable($undeliverable)
    {
        $this->container['undeliverable'] = $undeliverable;

        return $this;
    }

    /**
     * Gets deceased
     * @return bool
     */
    public function getDeceased()
    {
        return $this->container['deceased'];
    }

    /**
     * Sets deceased
     * @param bool $deceased True if the contact is deceased
     * @return $this
     */
    public function setDeceased($deceased)
    {
        $this->container['deceased'] = $deceased;

        return $this;
    }

    /**
     * Gets moved
     * @return bool
     */
    public function getMoved()
    {
        return $this->container['moved'];
    }

    /**
     * Sets moved
     * @param bool $moved True if the contact has moved
     * @return $this
     */
    public function setMoved($moved)
    {
        $this->container['moved'] = $moved;

        return $this;
    }

    /**
     * Gets new_address_available
     * @return bool
     */
    public function getNewAddressAvailable()
    {
        return $this->container['new_address_available'];
    }

    /**
     * Sets new_address_available
     * @param bool $new_address_available True if a new address is available. This is mostly when the contact has moved, but never if the contact is deceased. If true, the new address will be given in \"contact\"
     * @return $this
     */
    public function setNewAddressAvailable($new_address_available)
    {
        $this->container['new_address_available'] = $new_address_available;

        return $this;
    }

    /**
     * Gets contact
     * @return \METHIS\ContactObject
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     * @param \METHIS\ContactObject $contact
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\METHIS\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\METHIS\ObjectSerializer::sanitizeForSerialization($this));
    }
}
